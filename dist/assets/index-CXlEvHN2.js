var c=Object.defineProperty;var u=(e,t,i)=>t in e?c(e,t,{enumerable:!0,configurable:!0,writable:!0,value:i}):e[t]=i;var o=(e,t,i)=>u(e,typeof t!="symbol"?t+"":t,i);import"https://www.gstatic.com/firebasejs/9.1.1/firebase-app.js";import"https://www.gstatic.com/firebasejs/9.1.1/firebase-firestore.js";(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))n(s);new MutationObserver(s=>{for(const r of s)if(r.type==="childList")for(const a of r.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&n(a)}).observe(document,{childList:!0,subtree:!0});function i(s){const r={};return s.integrity&&(r.integrity=s.integrity),s.referrerPolicy&&(r.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?r.credentials="include":s.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function n(s){if(s.ep)return;s.ep=!0;const r=i(s);fetch(s.href,r)}})();class l{constructor(t,i){o(this,"_trainingCount",0);o(this,"_processingWord","");o(this,"_processingBundle","");o(this,"_score",0);o(this,"_result",[]);console.log("trainingList",t),this.trainingList=t,this.wordList=t.liste.map(n=>n.word),this.stampId=i,this._remainingWord=this.wordList,this._trainingMaxCount=this.wordList.length}getRemainingWord(){return this._remainingWord||(this._remainingWord=[...this.wordList]),console.log("START getRemainingWord return this._remainingWord ...",this._remainingWord),this._remainingWord}Initialize(){console.log(this.wordList)}get totalWordCount(){return this.wordList.length}get score(){console.log("this._result");let t=0;return this._result.forEach(i=>{console.log("res",i),i.correct&&t++}),t}increaseScore(){this._score++}get trainingMaxCount(){return this.wordList.length}trainingCountIncrement(){this._trainingCount+=1}newResult(t){const i={word:this._processingWord,answer:t,correct:this._processingWord===t};console.log(i),this._result.push(i)}get trainingCountNumber(){return this._trainingCount}renderResult(){const t=[`<p>Ton score final est de ${this.score} sur ${this._trainingMaxCount}</p>.`];console.log("this._result",this._result),this._result.forEach(n=>{const s=n.correct?"égale à":"différent de",r=n.correct?"bg-green-500":"bg-red-500";t.push(`<p class="${r} p-2 rounded-md ring-2"><b>${n.answer}</b> est ${s} <b>${n.word}</b></p>`)});const i=t.join(",").replaceAll(",","");return console.log({joinResult:i}),i}getNextWord(){this.trainingCountIncrement(),this._remainingWord||(this._remainingWord=[...this.wordList]);const t=this.getRandomArbitrary(1,this._remainingWord.length)-1;return this._processingWord=this._remainingWord.splice(t,1)[0],console.log("START getNextWord return this._processingWord   : ",this._processingWord),this._processingWord}getNextBundle(){const t=this.getNextWord();console.log({nextWord:t});const i=this.trainingList.liste.find(n=>n.word===t);return console.log({fullWords:i}),this._processingBundle=[i.word,...i.falseWord].sort(),console.log(this._processingBundle),this._processingBundle}getRandomArbitrary(t,i){return Math.round(Math.random()*(i-t)+t)}}class g{constructor(t,i){o(this,"results",[]);this.listesMots=i,this.trainingCard=document.createElement("div"),this.trainingCard.classList=`relative flex flex-col items-center w-1/4 h-auto 
font-thin align-middle shadow-sm max-md:w-3/4 shadow-amber-300/80 bg-lime-300`,this.trainingCard.id=t,this.trainingCard.innerHTML=`

    <div id="training-count-box" class="absolute top-0 right-0 flex flex-row float-right">
        <div id="training-counter"></div>
        <span>/</span>
        <div id="training-max-count"></div>
    </div>

    <p id="explanations" class="flex items-center text-xl font-semibold text-center rounded shadow-sm w-fit">
    Lis le mot puis réécris le lorsqu'il disparait.</p>

    <select name="list" id="training-list-selector">
    </select>

    <p id="selected-list"></p>

    <p id="training-next-word" class="flex items-center text-xl font-semibold rounded shadow-sm w-fit">
    Mot à écrire : </p>
    
    <p class="text-xl" id="training-word"></p>

    <div class="z-10 flex flex-col items-center p-3 m-3 text-center align-middle 
    rounded-xl bg-amber-200/70 w-fit" id="training-feedback"></div>

    <input autocapitalize="off" autocomplete="off" spellcheck="false" 
    class="text-xl text-center" type="text" placeholder="écris ce mot~" id="training-user-input">
    
    <div class="flex flex-row" id="training-buttons">
        <button class="p-2 m-3 bg-yellow-300 rounded-md shadow-md" 
        id="training-start">Commencer</button>

        <button class="p-2 m-3 bg-yellow-300 rounded-md shadow-md" 
        id="training-valid">Valider</button>

        <button class="p-2 m-3 bg-yellow-300 rounded-md shadow-md" 
        id="training-next">Suivant</button>

        <button class="p-2 m-3 bg-yellow-300 rounded-md shadow-md" 
        id="training-confirm">Confirmer</button>

        <button class="p-2 m-3 bg-yellow-300 rounded-md shadow-md" 
        id="training-finish">Terminer</button>

        <button class="p-2 m-3 bg-yellow-300 rounded-md shadow-md" 
        id="training-modify">Modifier</button>
    </div>

`,this.trainingWroteThis=this.trainingCard.querySelector("#training-next-word"),this.trainingWord=this.trainingCard.querySelector("#training-word"),this.explanations=this.trainingCard.querySelector("#explanations"),this.trainingList=this.trainingCard.querySelector("#training-list-selector"),this.selectedList=this.trainingCard.querySelector("#selected-list"),this.trainingCountBox=this.trainingCard.querySelector("#training-count-box"),this.trainingCounter=this.trainingCard.querySelector("#training-counter"),this.trainingMaxCount=this.trainingCard.querySelector("#training-max-count"),this.boxButtons=this.trainingCard.querySelector("#training-buttons"),this.allButtons=this.trainingCard.querySelectorAll("#training-buttons button"),this.startButton=this.trainingCard.querySelector("#training-start"),this.validButton=this.trainingCard.querySelector("#training-valid"),this.nextButton=this.trainingCard.querySelector("#training-next"),this.modifyButton=this.trainingCard.querySelector("#training-modify"),this.confirmButton=this.trainingCard.querySelector("#training-confirm"),this.finishButton=this.trainingCard.querySelector("#training-finish"),this.trainingFeedBack=this.trainingCard.querySelector("#training-feedback"),this.userInput=this.trainingCard.querySelector("#training-user-input"),this.displayElement=[this.finishButton,this.trainingList,this.trainingWord,this.selectedList,this.explanations,this.trainingWroteThis,this.startButton,this.validButton,this.modifyButton,this.confirmButton,this.nextButton,this.trainingFeedBack,this.userInput],this.initializeEventListenerOnButtonClick()}hideAllMobileElement(){this.displayElement.forEach(t=>t.classList.add("hidden"))}hideAndReveal(){setTimeout(()=>{this.trainingWord.classList.add("hidden"),this.userInput.classList.remove("hidden"),this.userInput.focus(),this.userInput.select()},1e3)}trainingCardLauncher(){this.hideAllMobileElement(),document.querySelector("#display-card").classList.add("hidden"),this.trainingCounter.classList.remove("hidden"),this.trainingMaxCount.classList.remove("hidden"),this.trainingList.classList.remove("hidden"),this.selectedList.classList.remove("hidden"),this.startButton.classList.remove("hidden"),this.explanations.classList.remove("hidden"),Object.values(this.listesMots).map(t=>t.id).forEach(t=>{console.log({option:t});const i=document.createElement("option");i.value=t,i.textContent=t,this.trainingList.append(i)}),this.selectedList.textContent=this.listesMots.filter(t=>t.id==this.trainingList.value)[0].liste.map(t=>t.word),document.querySelector("#main-view").append(this.trainingCard)}initializeEventListenerOnButtonClick(){this.startButton.addEventListener("click",()=>{this.handlerEventOnStartClick()}),this.validButton.addEventListener("click",()=>{this.handlerEventOnValidClick()}),this.nextButton.addEventListener("click",()=>{this.handlerEventOnNextClick()}),this.modifyButton.addEventListener("click",()=>{this.handlerEventOnModifyClick()}),this.confirmButton.addEventListener("click",()=>{this.handlerEventOnConfirmClick()}),this.trainingList.addEventListener("change",()=>{this.handlerEventOnSelectorClick()}),this.finishButton.addEventListener("click",()=>{this.handlerEventOnFinishClick()})}handlerEventOnStartClick(){this.hideAllMobileElement(),this.trainingCountBox.classList.remove("hidden"),this.selectedList.classList.add("hidden"),this.trainingWord.classList.remove("hidden"),this.trainingWroteThis.classList.remove("hidden"),this.validButton.classList.remove("hidden");const t=this.selectedList.textContent.split(",");console.log({thatList:t});const i=this.listesMots.filter(n=>n.id==this.trainingList.value)[0];this.trainer=new l(i,Date.now()),console.log(this.trainer),this.trainingMaxCount.textContent=this.trainer.wordList.length,this.trainingCounter.textContent=0,this.handlerEventOnNextClick(this.trainer)}handlerEventOnValidClick(){this.userInput.value&&(console.log("click"),this.hideAllMobileElement(),this.trainingFeedBack.classList.remove("hidden"),this.modifyButton.classList.remove("hidden"),this.confirmButton.classList.remove("hidden"),this.trainingFeedBack.innerHTML=`Ta réponse est <strong>${this.userInput.value}</strong> confirmer ?`)}handlerEventOnNextClick(){console.log("click"),this.hideAllMobileElement(),this.trainingWroteThis.classList.remove("hidden"),this.trainingWord.classList.remove("hidden"),this.validButton.classList.remove("hidden"),this.trainingWord.textContent=this.trainer.getNextWord(),console.log("this.trainingList",this.trainer.trainingList),this.hideAndReveal()}handlerEventOnModifyClick(){this.hideAllMobileElement(),this.userInput.value=null,this.trainingWroteThis.classList.remove("hidden"),this.trainingWord.classList.remove("hidden"),this.validButton.classList.remove("hidden"),this.hideAndReveal(),console.log("click")}handlerEventOnConfirmClick(){this.trainer.newResult(this.userInput.value),this.userInput.value=null,this.trainingCounter.textContent=this.trainer._trainingCount,console.log("click"),this.trainer._trainingCount===this.trainer._trainingMaxCount?(this.hideAllMobileElement(),this.trainingFeedBack.classList.remove("hidden"),this.finishButton.classList.remove("hidden"),this.trainingFeedBack.innerHTML=this.trainer.renderResult()):this.handlerEventOnNextClick()}handlerEventOnSelectorClick(){this.selectedList.textContent=this.listesMots.filter(t=>t.id==this.trainingList.value)[0].liste.map(t=>t.word)}handlerEventOnFinishClick(){document.querySelector("#display-card").classList.remove("hidden"),this.trainingFeedBack.innerHTML=null,this.trainingFeedBack.classList.add("hidden"),this.trainingCard.remove()}}const d=[{id:14,liste:[{word:"le soir",falseWord:["lessoir","le soar","le seaur"]},{word:"le matin",falseWord:["le mattin","le mathin","le matain"]},{word:"le midi",falseWord:["le midie","le mydi","le middi"]},{word:"beau",falseWord:["baux","bo","beauh"]},{word:"un oiseau",falseWord:["un oaseau","un oizeau","un oiso"]}]},{id:15,liste:[{word:"le chapeau",falseWord:["le chapo","le chapau","le shapeau"]},{word:"bonhomme",falseWord:["bonome","beauhomme","bonehome"]},{word:"la fleur",falseWord:["la feur","la fleure","le fleur"]},{word:"un gâteau",falseWord:["un gateâu","un gato","un guateau"]},{word:"il a",falseWord:["i l'a","ile a","ila"]},{word:"elle a",falseWord:["el a","ella","elle la"]}]},{id:16,liste:[{word:"le mois",falseWord:["le moa","le moie","le moit"]},{word:"la chambre",falseWord:["la shambre","la chanbre","la chembre"]},{word:"l'année",falseWord:["l'anner'","l'anné","la née"]},{word:"mes",falseWord:["met","mé","mai"]},{word:"demain",falseWord:["deumain","demin","demmain"]}]}];class m{constructor(t,i){this.trainingCard=document.createElement("div"),this.trainingCard.classList=`relative flex flex-col items-center w-1/4 
font-thin align-middle shadow-sm max-md:w-3/4 shadow-amber-300/80 bg-lime-300`,this.trainingCard.id=t,this.trainingCard.innerHTML=`

    <div id="training-count-box" class="block hidden flex flex-row float-right">
        <div id="training-counter"></div>
        <span>/</span>
        <div id="training-max-count"></div>
    </div>

    <p id="explanations" class="flex items-center text-xl font-semibold text-center rounded shadow-sm w-fit">
    Lis les différents mots et sélectionne le bon.</p>

    <select name="list" id="training-list-selector">
    </select>

    <p id="selected-list"></p>

    <div class="flex flex-row" id="training-buttons-selection">
    </div>

    <div class="hidden z-10 flex flex-col items-center p-3 m-3 text-center align-middle 
    rounded-xl bg-amber-200/70 w-fit" id="training-feedback"></div>
    
    <div class="flex flex-row" id="training-buttons">
        <button class="p-2 m-3 bg-yellow-300 rounded-md shadow-md" 
        id="training-start">Commencer</button>

        <button class="p-2 m-3 bg-yellow-300 rounded-md shadow-md" 
        id="training-valid">Valider</button>

        <button class="p-2 m-3 bg-yellow-300 rounded-md shadow-md" 
        id="training-next">Suivant</button>

        <button class="p-2 m-3 bg-yellow-300 rounded-md shadow-md" 
        id="training-confirm">Confirmer</button>

        <button class="p-2 m-3 bg-yellow-300 rounded-md shadow-md" 
        id="training-modify">Modifier</button>

        <button class="p-2 m-3 bg-yellow-300 rounded-md shadow-md" 
        id="training-finish">Terminer</button>
    </div>


        `,this.cardId=t,this.listesMots=i,console.log("listesMots",i),console.log("this.listesMots",this.listesMots),this.explanations=this.trainingCard.querySelector("#explanations"),this.trainingList=this.trainingCard.querySelector("#training-list-selector"),this.selectedList=this.trainingCard.querySelector("#selected-list"),this.trainingCountBox=this.trainingCard.querySelector("#training-count-box"),this.trainingCounter=this.trainingCard.querySelector("#training-counter"),this.trainingMaxCount=this.trainingCard.querySelector("#training-max-count"),this.startButton=this.trainingCard.querySelector("#training-start"),this.startButton=this.trainingCard.querySelector("#training-start"),this.validButton=this.trainingCard.querySelector("#training-valid"),this.nextButton=this.trainingCard.querySelector("#training-next"),this.modifyButton=this.trainingCard.querySelector("#training-modify"),this.finishButton=this.trainingCard.querySelector("#training-finish"),this.confirmButton=this.trainingCard.querySelector("#training-confirm"),this.trainingFeedBack=this.trainingCard.querySelector("#training-feedback"),this.boxButtons=this.trainingCard.querySelector("#training-buttons"),this.boxTrainButtons=this.trainingCard.querySelector("#training-buttons-selection"),this.initializeEventListenerOnButtonClick()}getStarted(){this.hideAllMobileElement(),document.querySelector("#display-card").classList.add("hidden"),this.trainingCounter.classList.remove("hidden"),this.trainingMaxCount.classList.remove("hidden"),this.trainingList.classList.remove("hidden"),this.selectedList.classList.remove("hidden"),this.startButton.classList.remove("hidden"),this.explanations.classList.remove("hidden"),Object.values(this.listesMots).map(t=>t.id).forEach(t=>{console.log({option:t});const i=document.createElement("option");i.value=t,i.textContent=t,this.trainingList.append(i)}),this.selectedList.textContent=this.listesMots.filter(t=>t.id==this.trainingList.value)[0].liste.map(t=>t.word),document.querySelector("#main-view").append(this.trainingCard)}getBundleListe(){this.bundleList=this.listeDeMots.map(t=>(console.log({word:t}),console.log("word.liste.falseWord  : ",t.liste.falseWord),[t.liste.word,...t.liste.falseWord]))}hideAllMobileElement(){this.trainingCard.querySelectorAll("button").forEach(t=>t.classList.add("hidden"))}initializeEventListenerOnButtonClick(){this.startButton.addEventListener("click",()=>{this.handlerEventOnStartClick()}),this.validButton.addEventListener("click",()=>{this.handlerEventOnValidClick()}),this.nextButton.addEventListener("click",()=>{this.handlerEventOnNextClick()}),this.modifyButton.addEventListener("click",()=>{this.handlerEventOnModifyClick()}),this.confirmButton.addEventListener("click",()=>{this.handlerEventOnConfirmClick()}),this.trainingList.addEventListener("change",()=>this.handlerEventOnSelectorClick()),this.finishButton.addEventListener("click",()=>{this.handlerEventOnFinishClick()})}handlerEventOnStartClick(){this.hideAllMobileElement(),this.trainingCountBox.classList.remove("hidden"),this.trainingList.classList.add("hidden"),this.explanations.classList.add("hidden"),this.selectedList.classList.add("hidden"),this.selectedList.classList.add("hidden"),this.validButton.classList.add("hidden");const t=this.listesMots.filter(i=>i.id==this.trainingList.value)[0];this.trainer=new l(t,Date.now()),console.log(this.trainer),this.trainingMaxCount.textContent=this.trainer.wordList.length,this.trainingCounter.textContent=0,this.handlerEventOnNextClick(this.trainer)}handlerEventOnValidClick(){}handlerEventOnNextClick(t){if(this.trainingCounter.textContent=this.trainer._trainingCount,console.log("training session : ",t._remainingWord),this.trainer._remainingWord.length===0)this.trainingEnd();else{this.trainer.getNextBundle(),this.boxTrainButtons.classList.remove("hidden"),this.trainer._processingBundle.forEach(n=>this.boxTrainButtons.insertAdjacentHTML("beforeend",`
            <button class="p-2 m-3 bg-yellow-300 rounded-md shadow-md"><span class="">${n}</span></button>
            `));const i=this.boxTrainButtons.querySelectorAll("button");console.log({choseBtn:i}),i.forEach(n=>{n.addEventListener("click",()=>{this.trainer.newResult(n.textContent),i.forEach(s=>s.remove()),this.handlerEventOnNextClick(this.trainer)})})}}trainingEnd(){this.trainingCountBox.classList.add("hidden"),this.trainingFeedBack.classList.remove("hidden"),this.finishButton.classList.remove("hidden"),this.trainingFeedBack.insertAdjacentHTML("beforeend",this.trainer.renderResult())}trainButtonChoice(){this.handlerEventOnNextClick}handlerEventOnModifyClick(){}handlerEventOnConfirmClick(){}handlerEventOnSelectorClick(){this.selectedList.textContent=this.listesMots.filter(t=>t.id==this.trainingList.value)[0].liste.map(t=>t.word)}handlerEventOnFinishClick(){document.querySelector("#display-card").classList.remove("hidden"),this.trainingFeedBack.innerHTML=null,this.trainingFeedBack.classList.add("hidden"),this.trainingCard.remove()}}const f=new Date,v=w(f),h=document.querySelector("#display-card"),C=document.querySelector("#test-btn"),L=document.querySelector("#training-btn"),p=h.querySelector("#message-week-number"),x=["le mois","la chambre","l'année","mes","demain"];b();function b(){y(),E(),B()}function w(e){e=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate())),e.setUTCDate(e.getUTCDate()+4-(e.getUTCDay()||7));var t=new Date(Date.UTC(e.getUTCFullYear(),0,1)),i=Math.ceil(((e-t)/864e5+1)/7);return[i]}function y(){p.textContent+=v;const e=h.querySelector("#liste-mots"),t=document.createElement("div");t.id="la-liste",t.textContent=x.join(" - "),e.append(t)}function B(){C.addEventListener("click",function(){const e=new Date,t=fetch("./library/jsmodules/listesMots.json").then(n=>n.json());console.log(t),new g(e,d).trainingCardLauncher()})}function E(){const e=new Date,t=new m(e,d);L.addEventListener("click",function(){t.getStarted()})}
